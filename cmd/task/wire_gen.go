// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//+build !wireinject

package main

import (
	"github.com/qmdx00/crobjob/internal/task/biz"
	"github.com/qmdx00/crobjob/internal/task/config"
	"github.com/qmdx00/crobjob/internal/task/data"
	"github.com/qmdx00/crobjob/internal/task/log"
	"github.com/qmdx00/crobjob/internal/task/producer"
	"github.com/qmdx00/crobjob/internal/task/server"
	"github.com/qmdx00/crobjob/pkg/lifecycle"
)

// Injectors from wire.go:

func initApp() (*lifecycle.App, func(), error) {
	taskConfig := config.NewTaskConfig()
	logger := log.NewTaskLogger(taskConfig)
	taskProducer, cleanup, err := producer.NewProducer(taskConfig)
	if err != nil {
		return nil, nil, err
	}
	tracer, cleanup2, err := data.NewTracer(taskConfig)
	if err != nil {
		cleanup()
		return nil, nil, err
	}
	db, err := data.NewGormDB(tracer)
	if err != nil {
		cleanup2()
		cleanup()
		return nil, nil, err
	}
	taskRepo := data.NewTask(db)
	taskBusiness := biz.NewTaskBusiness(logger, taskProducer, taskRepo)
	grpcServer, err := server.NewGRPCServer(taskBusiness, tracer)
	if err != nil {
		cleanup2()
		cleanup()
		return nil, nil, err
	}
	transportServer := server.NewServer(logger, grpcServer, taskConfig)
	app := newApp(transportServer)
	return app, func() {
		cleanup2()
		cleanup()
	}, nil
}
